name: Code Workflow
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
jobs:
  Testing:
    runs-on: Ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Maven Test
      run: mvn test

    - name: Checkstyle
      run: mvn checkstyle:checkstyle

    # Setup java 11 to be default (sonar-scanner requirement)
    - name: Set Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # see 'supported distributions' for availability
        java-version: '11'

    # Setup Sonar-Scanner
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v7


    # Run Sonar-Scanner
    - name: SonarQube Scan
      run: sonar-scanner -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.sources=src/ -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ -Dsonar.junit.reportsPath=target/surefire-reports/ -Dsonar.jacoco.reportsPath=target/jacoco.exec -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4

    - name: Update application.properties file
      run: |
        sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
        sed -i "s/^jdbc.username.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
        sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

    - name: upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.aws_access_key_id }}
        secret_key: ${{ secrets.aws_secret_access_key }}
        registry: ${{ secrets.registry }}
        repo: actapp
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./
